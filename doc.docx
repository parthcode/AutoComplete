

Infosys



ListView with custom adapter and Json data
July, 2015



INFOSYS LIMITED
Bangalore





Document No.		Ver. Rev. :	Version 0.1
Authorized by:		Signature/:
Date:	Ishan Das
22/07/2015



COPYRIGHT NOTICE 

©2015 Infosys Limited, Bangalore, India. All rights reserved. Infosys believes the information in this document is accurate as of its publication date; such information is subject to change without notice. Infosys acknowledges the proprietary rights of other companies to the trademarks, product names and such other intellectual property rights mentioned in this document. Except as expressly permitted, neither this document nor any part of it may be reproduced, stored in a retrieval system, or transmitted in any form or by any means, electronic, mechanical, printing, photocopying, recording or otherwise, without the prior permission of Infosys Limited and/or any named intellectual property rights holders under this document.

Infosys Limited 
Hosur Road 
Electronic City, 3rd Cross 
Bangalore 560 100 
India. 
Telephone: (91) (80)28520 261-270 
Fax: (91) (80) 8520 362 
Website: http://www.infosys.com 

















Author(s): Ishan Das
Date written (MM/DD/YY): 07/22/15
Project Details 
•         Project(s) involved: RB7ST2TM
•         H/W Platform: NA	
•         S/W Environment: Android Studio with JRE
•         Application Type: Listview, Json Data 	
•         Project Type: NA
Target readers 
Android developers, Java
Keywords 
Java, ListView custom adapter, Gson 
















ListView with custom adapter and Json data

ListView
ListView is a View group which displays a list of scrollable items. It’s the most widely used UI element when it comes to displaying a collection of data.




Parts of list view display:
•	View – User interface
•	Adapter – The bridge 
•	Data Source – Data/Data model

For a custom list view:
•	View will be populated by adapter extracting data from the Data Source. The adapter will be responsible for assigning the custom layout that needed for ListView. View holders will be used to make the performance better.
How does it work?
We set adapters for the ListView which gets the data as an arraylist. The code might call findViewById() frequently when ListView is scrolled, which will in turn slow the performance. Even if the Adapter returns inflated view for recycling, the code still needs to look up the element and update them. To avoid all these “View Holder” design pattern is used. A ViewHolder object will store each component view inside the tag field of the Layout, so they can be immediately accessed without search.
The pattern i
View Holder pattern is about reducing the number of findViewById() calls in the adapter’s getView(). In practice, the View Holder is a lightweight inner class that holds direct references to all inner views from a row. You store it as a tag in the row’s view after inflating it.
our code might call findViewById() frequently during the scrolling of ListView, which can slow down performance. Even when the Adapter returns an inflated view for recycling, you still need to look up the elements and update them. A way around repeated use of findViewById() is to use the "view holder" design pattern.
A ViewHolder object stores each of the component views inside the tag field of the Layout, so you can immediately access them without the need to look them up repeatedly. First, you need to create a class to hold your exact set of views.

Let’s start with simple API call. By the end of this document we would be able to –
•	Know ListView
•	Design custom ListView
•	Work with View Holder 
•	De-serialize JSON with GSON library.


Before we start let me brief on JSON-
JSON, JavaScript Object notation is a format that uses human readable text to transfer data as property value pairs.
In our scenario we would be getting JSON from API that is called from the application. We will de-serialize the same and display the data to user in a custom listview.

API - http://api.railwayapi.com/live/train/<train number>/doj/<yyyymmdd>apikey/<apikey>/
Above is API from railwayapi.com, which takes train number and date of journey as parameter. This can be used with httpclient/httpurlconnection to get http response as the JSON shown below. This document is focused on displaying this JSON in ListView using custom adapter, hence HTTP get request is out of scope. 
JSON-
"{ \"train_number\": \"12345\", \"response_code\": 200, \"route\": [ { \"actdep\": \"03:50 PM\", \"station\": \"Howrah Jn (HWH)\", \"no\": 1, \"actarr\": \"Source\", \"status\": \"Source\", \"schdep\": \"03:50 PM\", \"scharr\": \"Source\" }, { \"actdep\": \"05:20 PM\", \"station\": \"Barddhaman Jn (BWN)\", \"no\": 2, \"actarr\": \"05:15 PM\", \"status\": \"0 hour 11 min late\", \"schdep\": \"05:06 PM\", \"scharr\": \"05:04 PM\" }, { \"actdep\": \"06:20 PM\", \"station\": \"Bolpur S Niktn (BHP)\", \"no\": 3, \"actarr\": \"06:15 PM\", \"status\": \"0 hour 22 min late\", \"schdep\": \"05:58 PM\", \"scharr\": \"05:53 PM\" }, { \"actdep\": \"07:23 PM\", \"station\": \"Rampur Hat (RPH)\", \"no\": 4, \"actarr\": \"07:22 PM\", \"status\": \"0 hour 25 min late\", \"schdep\": \"06:59 PM\", \"scharr\": \"06:57 PM\" }, { \"actdep\": \"09:09 PM\", \"station\": \"New Farakka Jn (NFK)\", \"no\": 5, \"actarr\": \"09:08 PM\", \"status\": \"0 hour 18 min late\", \"schdep\": \"08:52 PM\", \"scharr\": \"08:50 PM\" }, { \"actdep\": \"09:45 PM\", \"station\": \"Malda Town (MLDT)\", \"no\": 6, \"actarr\": \"09:40 PM\", \"status\": \"0 hour 10 min late\", \"schdep\": \"09:45 PM\", \"scharr\": \"09:30 PM\" }, { \"actdep\": \"12:14 AM\", \"station\": \"Kishanganj (KNE)\" \"total\": 13, \"position\": \" Saraighat Express is Destination Reached and is delayed by 01 Hr 45 Mins when it arrived at Guwahati (GHY) at 11:15 AM (105 Mins. Late)\" }";
        

To start with the application we will use GSON library. This is a free library to work with JSON, advantages:
•	Cleaner 
•	Easier to de-serialize JSON with it.

Let’s start with creating a new project in Android Studio-
 
 - 
 
Your project structure will look somewhat like this –
 
We need a class structure to hold de serialized JSON data. Add a folder to the project name it as “Model”. Inside the folder add a class. The class should have a relevant structure to hold JSON data. To do that we have many web applications available online which could convert JSON to POJO class structure. Below is the class structure in Model folder for the JSON received earlier from our API.
 
Model Classes–
Running.Java- The initial entry point of JSON to POJO:
package com.ishan387.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Running {

    private String train_number;
    private long response_code;
    private List<Route> route = new ArrayList<Route>();
    private long total;
    private Object position;
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * 
     * @return
     *     The trainNumber
     */
    public String getTrain_number() {
        return train_number;
    }

    /**
     * 
     * @param train_number
     *     The train_number
     */
    public void setTrain_number(String train_number) {
        this.train_number = train_number;
    }

    /**
     * 
     * @return
     *     The responseCode
     */
    public long getResponse_code() {
        return response_code;
    }

    /**
     * 
     * @param response_code
     *     The response_code
     */
    public void setResponse_code(long response_code) {
        this.response_code = response_code;
    }

    /**
     * 
     * @return
     *     The route
     */
    public List<Route> getRoute() {
        return route;
    }

    /**
     * 
     * @param route
     *     The route
     */
    public void setRoute(List<Route> route) {
        this.route = route;
    }

    /**
     * 
     * @return
     *     The total
     */
    public long getTotal() {
        return total;
    }

    /**
     * 
     * @param total
     *     The total
     */
    public void setTotal(long total) {
        this.total = total;
    }

    /**
     * 
     * @return
     *     The position
     */
    public Object getPosition() {
        return position;
    }

    /**
     * 
     * @param position
     *     The position
     */
    public void setPosition(Object position) {
        this.position = position;
    }

    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

}

Route.Java- To hold the route informations
package com.ishan387.models;

import java.util.HashMap;
import java.util.Map;

public class Route {

    private String actdep;
    private String station;
    private long no;
    private String actarr;
    private String status;
    private String schdep;
    private String scharr;
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * 
     * @return
     *     The actdep
     */
    public String getActdep() {
        return actdep;
    }

    /**
     * 
     * @param actdep
     *     The actdep
     */
    public void setActdep(String actdep) {
        this.actdep = actdep;
    }

    /**
     * 
     * @return
     *     The station
     */
    public String getStation() {
        return station;
    }

    /**
     * 
     * @param station
     *     The station
     */
    public void setStation(String station) {
        this.station = station;
    }

    /**
     * 
     * @return
     *     The no
     */
    public long getNo() {
        return no;
    }

    /**
     * 
     * @param no
     *     The no
     */
    public void setNo(long no) {
        this.no = no;
    }

    /**
     * 
     * @return
     *     The actarr
     */
    public String getActarr() {
        return actarr;
    }

    /**
     * 
     * @param actarr
     *     The actarr
     */
    public void setActarr(String actarr) {
        this.actarr = actarr;
    }

    /**
     * 
     * @return
     *     The status
     */
    public String getStatus() {
        return status;
    }

    /**
     * 
     * @param status
     *     The status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * 
     * @return
     *     The schdep
     */
    public String getSchdep() {
        return schdep;
    }

    /**
     * 
     * @param schdep
     *     The schdep
     */
    public void setSchdep(String schdep) {
        this.schdep = schdep;
    }

    /**
     * 
     * @return
     *     The scharr
     */
    public String getScharr() {
        return scharr;
    }

    /**
     * 
     * @param scharr
     *     The scharr
     */
    public void setScharr(String scharr) {
        this.scharr = scharr;
    }

    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

}


To de-serialize the JSON and feed it in to Model class we will be needing GSON library which has functions to do the same. We can download the .jar from GSON website and include it as library in our project.


 
ViewModel- The business logic will be here. This class will have :
•	Public properties to hold values and bind it to the UI
•	WebClient call for the API
•	De-serializing the JSON and adding values to the Model class structure
Initially ViewModel folder will have a ViewModelLocator class and a MainViewModel class. MainViewModel is where our business logic will be. ViewModelLocator class locates the ViewModels available in the application. We will use that going forward while binding datacontext to controls.
MainActivity class-

package com.ishan387.syt;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import com.google.gson.Gson;
import com.ishan387.models.Route;
import com.ishan387.models.Running;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class HttpAct extends Activity {

       
    String u ="http://api.railwayapi.com/live/train/";
    static final String apikey ="thnxp9240";
    static  final String zero ="0";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_http);

       
        String newString,d;


      
        String testresult= "{ \"route\": [ { \"no\": 1, \"station\": \"Howrah Jn (HWH)\", \"status\": \"Source\", \"actarr\": \"Source\", \"scharr\": \"Source\", \"actdep\": \"03:50 PM\", \"schdep\": \"03:50 PM\" }, { \"no\": 2, \"station\": \"Barddhaman Jn (BWN)\", \"status\": \"0 hour 6 min before\", \"actarr\": \"04:58 PM\", \"scharr\": \"05:04 PM\", \"actdep\": \"05:06 PM\", \"schdep\": \"05:06 PM\" }, { \"no\": 3, \"station\": \"Bolpur S Niktn (BHP)\", \"status\": \"0 hour 2 min late\", \"actarr\": \"05:55 PM\", \"scharr\": \"05:53 PM\", \"actdep\": \"06:00 PM\", \"schdep\": \"05:58 PM\" }, { \"no\": 4, \"station\": \"Rampur Hat (RPH)\", \"status\": \"0 hour 1 min late\", \"actarr\": \"06:58 PM\", \"scharr\": \"06:57 PM\", \"actdep\": \"06:59 PM\", \"schdep\": \"06:59 PM\" }, { \"no\": 5, \"station\": \"New Farakka Jn (NFK)\", \"status\": \"0 hour 14 min before\", \"actarr\": \"08:36 PM\", \"scharr\": \"08:50 PM\", \"actdep\": \"08:52 PM\", \"schdep\": \"08:52 PM\" }, { \"no\": 6, \"station\": \"Malda Town (MLDT)\", \"status\": \"No Delay\", \"actarr\": \"09:30 PM\", \"scharr\": \"09:30 PM\", \"actdep\": \"09:45 PM\", \"schdep\": \"09:45 PM\" }, { \"no\": 7, \"station\": \"Kishanganj (KNE)\", \"status\": \"23 hour 10 min before\", \"actarr\": \"12:28 AM\", \"scharr\": \"11:38 PM\", \"actdep\": \"12:30 AM\", \"schdep\": \"11:40 PM\" }, ], \"total\": 13, \"response_code\": 200, \"train_number\": \"12345\", \"position\": \" Saraighat Express is Destination Reached and there is No Delay when it arrived at Guwahati (GHY) at 09:30 AM (On Time)\" }";
       

 Gson gson = new Gson();
        Running rs = gson.fromJson(testresult,
                Running.class);*/

         if (rs != null) {
        
		    setDisplayList(rs);


        }
        	     


    }

    private void setDisplayList(Running rs) {


        ArrayList<Route> r = new ArrayList<Route>();
        List<Route> rl = new ArrayList<>();
        rl = rs.getRoute();

        for(int i = 0; i<rs.getTotal();i++){
            r.add(rl.get(i));
        }



        MyCustomAdapter dataAdapter = new MyCustomAdapter(this,
                R.layout.run, r);
        ListView listView = (ListView) findViewById(R.id.listView1);
        // Assign adapter to ListView
        listView.setAdapter(dataAdapter);

    }


    private class MyCustomAdapter extends ArrayAdapter<Route> {

        private ArrayList<Route> countryList;

        public MyCustomAdapter(Context context, int textViewResourceId,
                               ArrayList<Route> countryList) {
            super(context, textViewResourceId, countryList);
            this.countryList = new ArrayList<Route>();
            this.countryList.addAll(countryList);
        }

        private class ViewHolder {
            TextView station;
            TextView Accarival;
            TextView contAccDeparture;
            TextView status;
            TextView SchArrival;
            TextView SchDeparture;
        }
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder holder = null;
           if (convertView == null) {

                LayoutInflater vi = (LayoutInflater)getSystemService(
                        Context.LAYOUT_INFLATER_SERVICE);
                convertView = vi.inflate(R.layout.run, null);

                holder = new ViewHolder();
                holder.station = (TextView) convertView.findViewById(R.id.station);
                holder.Accarival = (TextView) convertView.findViewById(R.id.name);
                holder.contAccDeparture = (TextView) convertView.findViewById(R.id.continent);
                holder.status = (TextView) convertView.findViewById(R.id.region);
                holder.SchArrival = (TextView) convertView.findViewById(R.id.textview5);
                holder.SchDeparture = (TextView) convertView.findViewById(R.id.textview6);

                convertView.setTag(holder);

            } else {
                holder = (ViewHolder) convertView.getTag();
            }

            Route country = countryList.get(position);
            holder.station.setText(country.getStation());
            holder.Accarival.setText(country.getActarr());
            holder.contAccDeparture.setText(country.getActdep());
            holder.status.setText(country.getStatus());
            holder.SchArrival.setText(country.getScharr());
            holder.SchDeparture.setText(country.getSchdep());

            return convertView;

        }
    }

}




Breaking the Code-
•	Section 1 
We have declared a collection “_mList” of type “Main”. We have a public property as “MList” which has get/set methods.
Note that the collection is an Observable Collection. An Observable Collection is a collection which implements interfaces: INotifyCollectionChanged, INotifyPropertyChanged. As such it is useful if the application wants to know when the collection has changed. An event is triggered whenever there is a change in collection data.
In our MList we are calling RaisePropertyChanged whenever we set the value for _mList.
Recalling our Model Class structure, we have a class named “Main” which has temp, humidity and other relevant properties in it. 

•	Section 2
This part of the code helps in binding design time data.

•	Section 3
If the application is not in design time and is running for real, this part will execute. We have created a new instance for our collection and have created a WebClient named “client”. 
Before calling the API with WebClient we make sure we have a handler once the download is complete and results are returned. We named it Client_DownloadStringCompleted. We call DownloadStringAsync method with our API. As it’s an async method it won’t be blocking the calling thread and the UI will be responsive while webclient calls the API. 

•	Section 4
Once the download is complete the control goes to Client_DownloadStringCompleted function. Here we declare variable “result” of type RootObject. RootObject is a class in Model which has property for all the available classes. We use the method from Json.NET library to de-serialize the JSON into RootObject type. We add an item of type “Main” in MList collection.
Note that the item in collection will be having data of type “Main” which indeed has properties for temperature, humidity, pressure etc.

View- 

httpact

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.ishan387.syt.HttpAct"
    android:orientation="vertical"
    android:background="@color/back">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginBottom="1dp"
        android:background="@color/grey">
        <TextView
            android:id="@+id/statustext"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"

            android:text=""/>

    </LinearLayout>



    <ListView android:id="@+id/listView1" android:layout_width="match_parent"
        android:layout_height="fill_parent"
        android:layout_alignParentLeft="true"
        android:layout_alignParentStart="true" />


</LinearLayout>



Run xml –

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="6dip"
    android:background="@color/black">

    <!-- Station tag-->
    <TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:text="Station: "
        />

    <!-- actual arrival tag-->
    <TextView
        android:id="@+id/textView2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignLeft="@+id/textView1"
        android:layout_below="@+id/textView1"
        android:text="Actual Arrival: "
        />
    <TextView
        android:id="@+id/textView3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignLeft="@+id/textView2"
        android:layout_below="@+id/textView2"
        android:text="Actual Departure: "
        />
    <TextView
        android:id="@+id/scharr"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignLeft="@+id/textView3"
        android:layout_below="@+id/textView3"

        android:text="Scheduled Arrival: "
        />
    <TextView
        android:id="@+id/schdep"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignLeft="@+id/scharr"
        android:layout_below="@+id/scharr"

        android:text="Scheduled Departure: "
        />

    <TextView
        android:id="@+id/region"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"

        android:layout_below="@+id/textview6"
        android:layout_alignLeft="@+id/station"
        android:layout_marginLeft="10dp"
        android:textAllCaps="true"

        android:text="stat" />
    <TextView
        android:id="@+id/station"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
       android:layout_toRightOf="@+id/textView1"
        android:layout_marginLeft="85dp"
        android:text="blr junction"
        android:textStyle="bold"
        android:textAllCaps="true"
        android:textColor="@color/orange"/>

    <TextView
        android:id="@+id/continent"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignBaseline="@+id/textView3"
        android:layout_alignBottom="@+id/textView3"
        android:layout_toRightOf="@+id/textView3"
        android:layout_alignLeft="@+id/station"
        android:layout_marginLeft="10dp"
        android:text="actual dept" />



    <TextView
        android:id="@+id/name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/station"
        android:layout_toRightOf="@+id/textView2"
        android:layout_alignBaseline="@+id/textView2"
        android:layout_alignLeft="@+id/station"
        android:layout_marginLeft="10dp"

        android:text="acct ariv" />



    <TextView
        android:id="@+id/textview5"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"

        android:layout_below="@+id/continent"
        android:layout_toRightOf="@+id/scharr"
        android:layout_alignLeft="@+id/station"
        android:layout_marginLeft="10dp"
        android:text="scc arival" />


    <TextView
        android:id="@+id/textview6"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/textview5"
        android:layout_toRightOf="@+id/continent"
        android:layout_alignLeft="@+id/station"
        android:layout_marginLeft="10dp"
        android:text="sch dep" />

</RelativeLayout>



Breaking the XML – 
•	Section 1
We are setting of the data context for the Grid to Main , which the ViewModelLocator will fetch as MainViewModel. Setting up data context tells my program that MainViewModel will be my default source for binding controls.

•	Section 2
We frame the Grid into rows and columns dividing it into 3 rows and 2 columns.

•	Section 3 
We are adding text blocks in our grid here. With Grid.Row and Grid.Column property we can arrange the text blocks in any row/column that we had defined earlier. The Text="{Binding MList[0].temp}" binds the temp property for first item of MList. We can also bind by selecting the control then pressing F4 which will bring property window for the control, there we can select create data binding for text property of the control. Here’s a screen shot of binding-
 



 
MainPage view
Provided the system/phone is connected to internet run the application in emulator or phone that connected to Visual Studio, you will get your application working.
  

