

Infosys



Working with WebClient in MVVM architecture
March, 2015



INFOSYS LIMITED
Bangalore





Document No.		Ver. Rev. :	Version 0.1
Authorized by:		Signature/:
Date:	Ishan Das
1/03/2015



COPYRIGHT NOTICE 

©2015 Infosys Limited, Bangalore, India. All rights reserved. Infosys believes the information in this document is accurate as of its publication date; such information is subject to change without notice. Infosys acknowledges the proprietary rights of other companies to the trademarks, product names and such other intellectual property rights mentioned in this document. Except as expressly permitted, neither this document nor any part of it may be reproduced, stored in a retrieval system, or transmitted in any form or by any means, electronic, mechanical, printing, photocopying, recording or otherwise, without the prior permission of Infosys Limited and/or any named intellectual property rights holders under this document.

Infosys Limited 
Hosur Road 
Electronic City, 3rd Cross 
Bangalore 560 100 
India. 
Telephone: (91) (80)28520 261-270 
Fax: (91) (80) 8520 362 
Website: http://www.infosys.com 

















Author(s): Ishan Das
Date written (MM/DD/YY): 06/20/14
Project Details 
•         Project(s) involved: RB7ST2TM
•         H/W Platform: NA	
•         S/W Environment: Visual Studio with Windows Phone SDK
•         Application Type: MVVM 	
•         Project Type: NA
Target readers 
C# developers, Windows Phone 8 developers
Keywords 
C#, MVVM, WebClient 
















Working with WebClient in MVVM architecture 

Introduction to MVVM
Model-View-ViewModel is an application design architecture which derives from MVC. It helps to improve the separation of business and presentation layers without any direct communication between each other. MVVM serves the separation of concern, helps in reusability of code and it’s testable.



Parts of MVVM pattern:
•	View – User interface
•	ViewModel – Business Layer/Logic
•	Model – Data/Data model
How does it work?
When user interacts with the UI(View) the request is handled by the Viewmodel. The viewModel works with the business logic to fetch data from the model. The model could be the class architecture to hold data that’s returned as a result of web client or any database. It is comprised of the data model and the data access mechanisms. 
Let’s start with simple API call handled by web client in MVVM. By the end of this document we would be able to –
•	Know MVVM architecture
•	Handle web client 
•	De-serialize JSON
•	Incorporate binding basics 

Before we start let me brief on web client and JSON-
WebClient class has methods to handle sending /receiving data from any identified URI. It is a higher level abstraction on top of HttpWebRequest for simplifying tasks like extracting data from the response.
JSON, JavaScript Object notation is a format that uses human readable text to transfer data as property value pairs.
In our scenario we would be getting JSON from API that is called from WebClient. We will de-serialize the same and display the data to user in our MVVM application.

API - http://api.openweathermap.org/data/2.5/weather?q=Mysore&units=Metric
Above is a free API from openweathermap.org which takes in city name and unit type as parameters. This will be used in WebClient call which will return the below JSON as result.
JSON-
{"coord":{"lon":76.65,"lat":12.31},"sys":{"message":0.0041,"country":"IN","sunrise":1425172127,"sunset":1425214960},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02d"}],"base":"cmc stations","main":{"temp":20.869,"temp_min":26.446,"temp_max":26.446,"pressure":943.8,"sea_level":1024.33,"grnd_level":941.07,"humidity":90},"wind":{"speed":2.4,"deg":177.505},"clouds":{"all":12},"dt":1425194861,"id":1262321,"name":"Mysore","cod":200}


To start with MVVM architecture we will use MVVMLight toolkit. This is a free library to accelerate MVVM application design and can be downloaded through visual studio nugets. Advantages:
•	Cleaner and easy to extend
•	It also creates testable applications

Let’s start with creating a new project in Visual Studio-
 
Select Blank Silverlight application for windows phone and give it a name- 
Download MVVMLight toolkit from nuggets –
 
Your project structure will look somewhat like this –
 
We need a class structure to hold de serialized JSON data. Add a folder to the project name it as “Model”. Inside the folder add a class. The class should have a relevant structure to hold JSON data. To do that we have many web applications available online which could convert JSON to C# class structure. Below is the class structure in Model folder for the JSON received earlier from our API.
 
Model Class–
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WebClientTestMvvm.Model
{
    public class Coord
    {
        public double lon { get; set; }
        public double lat { get; set; }
    }

    public class Sys
    {
        public double message { get; set; }
        public string country { get; set; }
        public int sunrise { get; set; }
        public int sunset { get; set; }
    }

    public class Weather
    {
        public int id { get; set; }
        public string main { get; set; }
        public string description { get; set; }
        public string icon { get; set; }
    }

    public class Main
    {
        public double temp { get; set; }
        public double temp_min { get; set; }
        public double temp_max { get; set; }
        public double pressure { get; set; }
        public double sea_level { get; set; }
        public double grnd_level { get; set; }
        public int humidity { get; set; }
    }

    public class Wind
    {
        public double speed { get; set; }
        public double deg { get; set; }
    }

    public class Clouds
    {
        public int all { get; set; }
    }

    public class Rain
    {
        public double __invalid_name__3h { get; set; }
    }

    public class RootObject
    {
        public Coord coord { get; set; }
        public Sys sys { get; set; }
        public List<Weather> weather { get; set; }
        public string @base { get; set; }
        public Main main { get; set; }
        public Wind wind { get; set; }
        public Clouds clouds { get; set; }
        public Rain rain { get; set; }
        public int dt { get; set; }
        public int id { get; set; }
        public string name { get; set; }
        public int cod { get; set; }
    }
}


To de-serialize the JSON and feed it in to Model class we will be needing Json.NET library which has functions to do the same. We install the library to the project in the same way as we did for MVVMLight.
We will be using that function in our ViewModel class.

 
ViewModel- The business logic will be here. This class will have :
•	Public properties to hold values and bind it to the UI
•	WebClient call for the API
•	De-serializing the JSON and adding values to the Model class structure
Initially ViewModel folder will have a ViewModelLocator class and a MainViewModel class. MainViewModel is where our business logic will be. ViewModelLocator class locates the ViewModels available in the application. We will use that going forward while binding datacontext to controls.
MainViewModel Class-
using GalaSoft.MvvmLight;

namespace WebClientTestMvvm.ViewModel
{
    /// <summary>
    /// This class contains properties that the main View can data bind to.
    /// <para>
    /// Use the <strong>mvvminpc</strong> snippet to add bindable properties to this ViewModel.
    /// </para>
    /// <para>
    /// You can also use Blend to data bind with the tool's support.
    /// </para>
    /// <para>
    /// See http://www.galasoft.ch/mvvm
    /// </para>
    /// </summary>
    public class MainViewModel : ViewModelBase
    {
        /// <summary>
        /// Initializes a new instance of the MainViewModel class.
        /// </summary>
        public MainViewModel()
        {
            if (IsInDesignMode)
            {
                // Code runs in Blend --> create design time data.
            }
            else
            {
                // Code runs "for real"
            }
        }
    }

Complete MainViewModel Class-
using GalaSoft.MvvmLight;
using Newtonsoft.Json;
using System.Collections.ObjectModel;
using System.Net;
using WebClientTestMvvm1.Model;

namespace WebClientTestMvvm1.ViewModel
{
    /// <summary>
    /// This class contains properties that the main View can data bind to.
    /// <para>
   /// Use the <strong>mvvminpc</strong> snippet to add bindable properties to this ViewModel.
    /// </para>
    /// <para>
    /// You can also use Blend to data bind with the tool's support.
    /// </para>
    /// <para>
    /// See http://www.galasoft.ch/mvvm
    /// </para>
    /// </summary>
    public class MainViewModel : ViewModelBase
    {
        /// <summary>
        /// Initializes a new instance of the MainViewModel class.
        /// </summary>
         
        private ObservableCollection<Main> _mList = null;
        public ObservableCollection<Main> MList
        {
            get
            {
                return _mList;
            }
            set
            {
                if (_mList == value)
                {
                    return;
                }
                _mList = value;
                RaisePropertyChanged("m");
            }
        }
        public MainViewModel()
        {
            if (IsInDesignMode)
            {
                // Code runs in Blend --> create design time data.
            }
            

     else
            {
              
			// Code runs "for real"

                MList = new ObservableCollection<Main>();
                WebClient client = new WebClient ();
                client.DownloadStringCompleted += client_DownloadStringCompleted;
  client.DownloadStringAsync(new System.Uri( "http://api.openweathermap.org/data/2.5/weather?q=Mysore&units=Metric"));
             }
        }

private void client_DownloadStringCompleted(object sender,DownloadStringCompletedEventArgs e)
        {
           
            RootObject result = null;
            result = JsonConvert.DeserializeObject<RootObject>(e.Result);
            MList.Add(result.main);
            
        }
        
    }
}
Breaking the Code-
•	Section 1 
We have declared a collection “_mList” of type “Main”. We have a public property as “MList” which has get/set methods.
Note that the collection is an Observable Collection. An Observable Collection is a collection which implements interfaces: INotifyCollectionChanged, INotifyPropertyChanged. As such it is useful if the application wants to know when the collection has changed. An event is triggered whenever there is a change in collection data.
In our MList we are calling RaisePropertyChanged whenever we set the value for _mList.
Recalling our Model Class structure, we have a class named “Main” which has temp, humidity and other relevant properties in it. 

•	Section 2
This part of the code helps in binding design time data.

•	Section 3
If the application is not in design time and is running for real, this part will execute. We have created a new instance for our collection and have created a WebClient named “client”. 
Before calling the API with WebClient we make sure we have a handler once the download is complete and results are returned. We named it Client_DownloadStringCompleted. We call DownloadStringAsync method with our API. As it’s an async method it won’t be blocking the calling thread and the UI will be responsive while webclient calls the API. 

•	Section 4
Once the download is complete the control goes to Client_DownloadStringCompleted function. Here we declare variable “result” of type RootObject. RootObject is a class in Model which has property for all the available classes. We use the method from Json.NET library to de-serialize the JSON into RootObject type. We add an item of type “Main” in MList collection.
Note that the item in collection will be having data of type “Main” which indeed has properties for temperature, humidity, pressure etc.

View- 

Mainpage xaml
<phone:PhoneApplicationPage
    x:Class="WebClientTestMvvm1.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:phone="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"
    xmlns:shell="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    FontFamily="{StaticResource PhoneFontFamilyNormal}"
    FontSize="{StaticResource PhoneFontSizeNormal}"
    Foreground="{StaticResource PhoneForegroundBrush}"
    SupportedOrientations="Portrait" Orientation="Portrait"
    shell:SystemTray.IsVisible="True">

    <!--LayoutRoot is the root grid where all page content is placed-->
    <Grid x:Name="LayoutRoot" Background="Transparent" DataContext="{Binding Source={StaticResource Locator}}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel x:Name="TitlePanel" Grid.Row="0" Margin="12,17,0,28">
            <TextBlock Text="MVVM-WebClient" Style="{StaticResource PhoneTextNormalStyle}" Margin="12,0"/>
        </StackPanel>

        <!--ContentPanel - place additional content here-->
        <Grid x:Name="ContentPanel" Grid.Row="1" Margin="12,0,12,0" DataContext="{Binding Main, Mode=OneWay}">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
           

	     


            <TextBlock Grid.Row="0" Text="Temp" Margin="5"></TextBlock>
     <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding MList[0].temp}"    Margin="5"></TextBlock>
            <TextBlock Grid.Row="1" Text="Pressure" Margin="5"></TextBlock>
            <TextBlock Grid.Row="2" Text="Humidity" Height="27" Margin="5" />
     <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding MList[0].pressure}" Margin="5"></TextBlock>
<TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding MList[0].humidity}" Margin="5"></TextBlock>


        </Grid>

    </Grid>

</phone:PhoneApplicationPage>

Breaking the XAML – 
•	Section 1
We are setting of the data context for the Grid to Main , which the ViewModelLocator will fetch as MainViewModel. Setting up data context tells my program that MainViewModel will be my default source for binding controls.

•	Section 2
We frame the Grid into rows and columns dividing it into 3 rows and 2 columns.

•	Section 3 
We are adding text blocks in our grid here. With Grid.Row and Grid.Column property we can arrange the text blocks in any row/column that we had defined earlier. The Text="{Binding MList[0].temp}" binds the temp property for first item of MList. We can also bind by selecting the control then pressing F4 which will bring property window for the control, there we can select create data binding for text property of the control. Here’s a screen shot of binding-
 



 
MainPage view
Provided the system/phone is connected to internet run the application in emulator or phone that connected to Visual Studio, you will get your application working.
  

